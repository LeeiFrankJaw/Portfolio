(require '[clojure.java.io :as io])
(def myJPG (io/file "resources/public/intersections.png"))
myJPG
(require '[clj-http.client :as http])
(doc http/post)
req
(require '[weixin.request :as req])
(req/token)
(require '[weixin.request :as req] :reload)
(req/token)
(require '[weixin.request :as req] :reload)
myJPG
(def myJPG (io/file "resources/public/10.jpg"))
myJPG
(doc req/upload-media)
(req/upload-media "image)
(req/upload-media "image" myJPG)
(req/send-text "omWvSstibTPRveSc3kqONvo8cL8c" "This is a test to see what the response is")
(def myJPG {"k1" "v1" "k2" "v2})
(def myJPG {"k1" "v1" "k2" "v2"})
(def myMap {"k1" "v1" "k2" "v2"})
(myMap 1)
(myMap "k1")
(nth myMap 1)
(first myMap)
(for [[key val] myMap]
     {(keyword key) val})
(into {} (for [[key val] myMap] {(keyword key) val})
)
(keyword myMap)
to-keyword
(into {} [1 2])
(into {} ["ba" "a"])
(into {} [["ba" "a"]])
(into {} [[1 2]])
(into {} [[1 2 3 4]])
(into {} [[1 2]])
(doc into)
(req/send-text "omWvSstibTPRveSc3kqONvo8cL8c" "This is a test to see what the response is")
(require :reload '[weixin.request :as req])
(req/send-text "omWvSstibTPRveSc3kqONvo8cL8c" "This is a test to see what the response is")
(require :reload '[weixin.request :as req])
(req/send-text "omWvSstibTPRveSc3kqONvo8cL8c" "This is a test to see what the response is")
(require '[weixin.request :as req])
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(require '[weixin.request :as req] :reload)
(doc req/gen-url)
(require '[weixin.request :as req] :reload)
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(require '[weixin.request :as req] :reload)
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(require '[weixin.request :as req] :reload)
(require '[clojure.java.io :as io])
(require '[weixin.request :as req] :reload)
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(require '[weixin.request :as req] :reload)
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(require '[weixin.request :as req] :reload)
(def response (req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO"))
(keys response)
(-> response :body class)
(-> response :body first)
(doc take)
(take 5 "012345")
(->> response :body (take 10))
(->> response :body (take 100))
(require '[weixin.request :as req] :reload)
(def response (req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO"))
response
(require '[weixin.request :as req] :reload)
(req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO")
(def myDownload (req/download-media "37whMjcac-ulEB_QVfOS0ugSKRxJeNg2UI6JDNxsN3tbtf4nMWHForEf7lZK3-IO"))
myDownload
(req/token)
(doc spit)
myDownload
(spit "resources/downloads/test.jpg" myDownload)
myDownload
(spit "resources/downloads/test.jpg" (io/output-stream myDownload))
(spit "resources/downloads/test.jpg" (io/file myDownload))
(spit "resources/downloads/test.jpg" (io/input-stream myDownload))
(doc myDownload .write)
(doc .write)
(doc with-open)
myDownload
(.getSize myDownload)
(.getSizes myDownload)
(.length myDownload)
(.Length myDownload)
(len myDownload)
(length myDownload)
(with-open [out (io/output-stream (io/file "resources/downloads/test2.jpg"))] (.write out myDownload))
response
(pprint response)
(doc disocc)
(doc disassoc)
(doc dissoc)
(-> response (dissoc :body) pprint)
(get response :headers)
(get-in response [:headers "Content-disposition")
(get-in response [:headers "Content-disposition"])
(->> [:headers "Content-disposition"] (get-in response) (re-find #"^(filename=)"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"^f"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"="))
(->> [:headers "Content-disposition"] (get-in response) (re-matcher #";="))
(->> [:headers "Content-disposition"] (get-in response) (re-matcher #";=") seq)
(->> [:headers "Content-disposition"] (get-in response) (re-matcher #";="))
(->> [:headers "Content-disposition"] (get-in response) (re-matcher #"f"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"f"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"fi"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"filename"))
(->> [:headers "Content-disposition"] (get-in response) (re-find #"filename="))
(->> [:headers "Content-disposition"] (get-in response) (re-matcher #"filename="))
(->> [:headers "Content-disposition"] (get-in response) (re-matches #"filename="))
(->> [:headers "Content-disposition"] (get-in response) (re-matches #".*filename=.*"))
(->> [:headers "Content-disposition"] (get-in response) (re-matches #"filename="))
(->> [:headers "Content-disposition"] (get-in response) (re-seq #"filename="))
(->> [:headers "Content-disposition"] (get-in response) (re-seq #"(=)"))
(->> [:headers "Content-disposition"] (get-in response) (re-seq #"=.*"))
(get-in response [:headers "Content-disposition")
(get-in response [:headers "Content-disposition"])
(def cdispos (get-in response [:headers "Content-disposition"]))
cdispos
(require '[clojure.string :as str])
(str/split cdispos #"[&=")
(str/split cdispos #"[&=]")
(str/split cdispos #"[;=]")
(str/split cdispos #"[\d=]")
(str/split cdispos #"[\W=]")
(str/split cdispos #"[;\W=]")
(str/split cdispos #"[;=]")
(str/split cdispos #"[; =]")
(str/split cdispos #"[ =]")
(str/split cdispos #"[; =]")
(apply hash-map (str/split cdispos #"[; =]"))
((apply hash-map (str/split cdispos #"[; =]")) "filename")
(println ((apply hash-map (str/split cdispos #"[; =]")) "filename"))
(with-open [out (io/output-stream (io/file "resources/downloads/test.jpg"))] (.write out myDownload))
(require :reload '[weixin.request :as req])
(doc req/download-media)
(req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK)
(req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK")
(doc req/download-media)
(require :reload '[weixin.request :as req])
(req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK")
(def cdispos (req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK"))
cdispos
(require :reload '[weixin.request :as req])
(def cdispos (req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK"))
cdispos
(->> (str/split cdispos #"[; =]")
     (apply hash-map)
     (-> "filename"))
(->> (str/split cdispos #"[; =]")
     (apply hash-map))
(->> (str/split cdispos #"[; =]")
     (apply hash-map))
(->> (str/split cdispos #"[; =]")
     (apply hash-map)
     '(-> "filename"))
(require :reload '[weixin.request :as req])
(req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK")
(subvec "123456" 1 4)
(substr"123456" 1 4)
(subs)
(doc subs)
(subs "012345678" 1)
(subs "012345678" 5)
(subs "012345678" 1 -1)
(length "123")
(.length "123")
response
cdispos
(println cdispos)
(subs cdispos 10)
(subs cdispos 15)
(subs cdispos 20)
(subs cdispos 21)
(subs cdispos 22)
(subs cdispos 22 (.length cdispos))
(subs cdispos 22 (- (.length cdispos) 1))
(require :reload '[weixin.request :as req])
(req/download-media "dV8u_DGG2sDoPM3_Z211qfZfRSS1_WRy50Y6HWv9yAAZ8l9YCwVrbs_EGEkXGZOK")
(req/upload-media "voice" "resources/public/milstein.mp3")
(req/upload-media "voice" (io/file "resources/public/milstein.mp3"))
(req/download-media "ER5reXePq9fzfhK45mcWLec_y3ytfz5aZ2nqhstkuKT6yqp-f_E7eu-8DY6Ow-br")
(req/upload-media "voice" (io/file "resources/public/inventio.mp3"))
(req/download-media "almsX1XU9lmO5tzb4aD56OiikctCl1inr-LF724Awq8cTB59zifvEzskgCzW36T2")
(req/upload-media "voice" (io/file "resources/public/movie.mp4"))
(req/upload-media "video" (io/file "resources/public/movie.mp4"))
(req/download-media "FOXHPCfeZT0INR4T8GKLiP1qXY4OHf4vG7p0PncEXlQwcseRR1DVhtiil-W9-33C")
